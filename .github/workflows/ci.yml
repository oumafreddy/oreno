name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
        django-version: ["5.1", "5.2"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: oreno_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up environment variables
      run: |
        echo "DJANGO_SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DJANGO_DEBUG=True" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.postgresql" >> $GITHUB_ENV
        echo "DB_NAME=oreno_test" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASS=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV

    - name: Run migrations
      run: |
        python manage.py migrate --settings=config.settings.development

    - name: Run tests
      run: |
        python manage.py test --settings=config.settings.development

    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r apps/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run code quality checks
      run: |
        pip install black isort flake8
        black --check apps/ config/ services/
        isort --check-only apps/ config/ services/
        flake8 apps/ config/ services/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.django-version }}
        path: |
          bandit-report.json
          safety-report.json

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build static files
      run: |
        python manage.py collectstatic --noinput --settings=config.settings.production

    - name: Create deployment package
      run: |
        tar -czf oreno-grc-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='.venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='tests' \
          .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: oreno-grc-build-${{ github.sha }}
        path: oreno-grc-${{ github.sha }}.tar.gz

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          yourusername/oreno-grc:latest
          yourusername/oreno-grc:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
