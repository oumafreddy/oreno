# Generated by Django 5.1.8 on 2025-08-25 05:44

import django.db.models.deletion
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('compliance', '0002_initial'),
        ('organizations', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FinancialControlFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('fiscal_year', models.PositiveIntegerField()),
                ('framework_type', models.CharField(choices=[('sox', 'Sarbanes-Oxley (SOX)'), ('ifrs', 'International Financial Reporting Standards'), ('gaap', 'Generally Accepted Accounting Principles'), ('internal', 'Internal Financial Controls')], max_length=20)),
                ('control_objectives', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Control Objectives')),
                ('testing_frequency', models.CharField(choices=[('continuous', 'Continuous'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], default='quarterly', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Financial Control Framework',
                'verbose_name_plural': 'Financial Control Frameworks',
            },
        ),
        migrations.CreateModel(
            name='FinancialControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('control_id', models.CharField(db_index=True, max_length=50)),
                ('control_name', models.CharField(db_index=True, max_length=255)),
                ('control_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Control Description')),
                ('control_type', models.CharField(choices=[('preventive', 'Preventive'), ('detective', 'Detective'), ('corrective', 'Corrective')], max_length=20)),
                ('control_category', models.CharField(choices=[('authorization', 'Authorization'), ('segregation', 'Segregation of Duties'), ('access', 'Access Control'), ('reconciliation', 'Reconciliation'), ('review', 'Review and Approval'), ('documentation', 'Documentation')], max_length=20)),
                ('financial_process', models.CharField(blank=True, max_length=255, null=True)),
                ('risk_assessment', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Risk Assessment')),
                ('control_procedure', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Control Procedure')),
                ('testing_frequency', models.CharField(choices=[('continuous', 'Continuous'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], max_length=20)),
                ('last_tested_date', models.DateField(blank=True, null=True)),
                ('next_test_date', models.DateField(blank=True, null=True)),
                ('control_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
                ('framework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='compliance.financialcontrolframework')),
            ],
            options={
                'verbose_name': 'Financial Control',
                'verbose_name_plural': 'Financial Controls',
            },
        ),
        migrations.CreateModel(
            name='FinancialControlTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('test_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('test_date', models.DateField(auto_now_add=True)),
                ('test_procedure', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Test Procedure')),
                ('test_results', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Test Results')),
                ('test_result', models.CharField(choices=[('effective', 'Effective'), ('ineffective', 'Ineffective'), ('partially_effective', 'Partially Effective'), ('not_tested', 'Not Tested')], max_length=20)),
                ('exceptions_found', models.BooleanField(default=False)),
                ('exception_details', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Exception Details')),
                ('remediation_required', models.BooleanField(default=False)),
                ('remediation_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Remediation Plan')),
                ('remediation_due_date', models.DateField(blank=True, null=True)),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='compliance.financialcontrol')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('tested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Financial Control Test',
                'verbose_name_plural': 'Financial Control Tests',
            },
        ),
        migrations.CreateModel(
            name='InformationAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Description')),
                ('asset_type', models.CharField(choices=[('data', 'Data'), ('software', 'Software'), ('hardware', 'Hardware'), ('personnel', 'Personnel'), ('facilities', 'Facilities'), ('services', 'Services')], max_length=20)),
                ('confidentiality', models.CharField(choices=[('public', 'Public'), ('internal', 'Internal'), ('confidential', 'Confidential'), ('restricted', 'Restricted')], max_length=20)),
                ('integrity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('availability', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('classification_date', models.DateField(auto_now_add=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Information Asset',
                'verbose_name_plural': 'Information Assets',
            },
        ),
        migrations.CreateModel(
            name='ISMSFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('version', models.CharField(default='2022', max_length=50)),
                ('certification_status', models.CharField(choices=[('not_certified', 'Not Certified'), ('in_progress', 'Certification in Progress'), ('certified', 'Certified'), ('maintenance', 'Maintenance Phase')], default='not_certified', max_length=20)),
                ('certification_date', models.DateField(blank=True, null=True)),
                ('next_audit_date', models.DateField(blank=True, null=True)),
                ('scope', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Scope')),
                ('information_security_policy', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Information Security Policy')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'ISMS Framework',
                'verbose_name_plural': 'ISMS Frameworks',
            },
        ),
        migrations.CreateModel(
            name='PrivacyFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('version', models.CharField(default='GDPR 2018', max_length=50)),
                ('applicable_regulations', models.JSONField(blank=True, default=list)),
                ('privacy_policy_url', models.URLField(blank=True, null=True)),
                ('data_retention_policy', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Data Retention Policy')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('data_protection_officer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Privacy Framework',
                'verbose_name_plural': 'Privacy Frameworks',
            },
        ),
        migrations.CreateModel(
            name='SecurityIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('incident_number', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Description')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Investigating'), ('contained', 'Contained'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('detected_date', models.DateTimeField(auto_now_add=True)),
                ('containment_actions', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Containment Actions')),
                ('resolution_actions', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Resolution Actions')),
                ('lessons_learned', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Lessons Learned')),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('affected_assets', models.ManyToManyField(blank=True, to='compliance.informationasset')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_incidents', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_incidents', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Security Incident',
                'verbose_name_plural': 'Security Incidents',
            },
        ),
        migrations.CreateModel(
            name='SegregationOfDuties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('conflicting_role', models.CharField(max_length=255)),
                ('violation_type', models.CharField(choices=[('authorization_execution', 'Authorization and Execution'), ('authorization_custody', 'Authorization and Custody'), ('authorization_recording', 'Authorization and Recording'), ('execution_custody', 'Execution and Custody'), ('execution_recording', 'Execution and Recording'), ('custody_recording', 'Custody and Recording')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=20)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Description')),
                ('mitigation_controls', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Mitigation Controls')),
                ('review_frequency', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], default='quarterly', max_length=20)),
                ('last_review_date', models.DateField(blank=True, null=True)),
                ('next_review_date', models.DateField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Segregation of Duties',
                'verbose_name_plural': 'Segregation of Duties',
            },
        ),
        migrations.CreateModel(
            name='DataBreach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('breach_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Description')),
                ('detected_date', models.DateTimeField(auto_now_add=True)),
                ('breach_date', models.DateTimeField(blank=True, null=True)),
                ('severity', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk')], max_length=20)),
                ('status', models.CharField(choices=[('detected', 'Detected'), ('investigating', 'Investigating'), ('contained', 'Contained'), ('assessed', 'Risk Assessed'), ('notified', 'Notified Authorities'), ('closed', 'Closed')], default='detected', max_length=20)),
                ('affected_data_subjects', models.PositiveIntegerField(default=0)),
                ('data_categories_affected', models.JSONField(blank=True, default=list)),
                ('containment_actions', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Containment Actions')),
                ('notification_date', models.DateTimeField(blank=True, null=True)),
                ('notification_details', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Notification Details')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Data Breach',
                'verbose_name_plural': 'Data Breaches',
                'constraints': [models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_databreach')],
            },
        ),
        migrations.CreateModel(
            name='DataProcessingActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Description')),
                ('purpose', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Purpose')),
                ('legal_basis', models.CharField(choices=[('consent', 'Consent'), ('contract', 'Contract'), ('legal_obligation', 'Legal Obligation'), ('vital_interests', 'Vital Interests'), ('public_task', 'Public Task'), ('legitimate_interests', 'Legitimate Interests')], max_length=20)),
                ('data_categories', models.JSONField(blank=True, default=list)),
                ('data_subject_categories', models.JSONField(blank=True, default=list)),
                ('recipients', models.JSONField(blank=True, default=list)),
                ('retention_period', models.CharField(blank=True, max_length=100, null=True)),
                ('security_measures', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Security Measures')),
                ('data_transfers', models.BooleanField(default=False)),
                ('transfer_countries', models.JSONField(blank=True, default=list)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Data Processing Activity',
                'verbose_name_plural': 'Data Processing Activities',
                'constraints': [models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_dataprocessingactivity')],
            },
        ),
        migrations.CreateModel(
            name='DataSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('request_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('data_subject_email', models.EmailField(max_length=254)),
                ('data_subject_name', models.CharField(max_length=255)),
                ('right_requested', models.CharField(choices=[('access', 'Right of Access'), ('rectification', 'Right of Rectification'), ('erasure', 'Right of Erasure'), ('portability', 'Right of Data Portability'), ('restriction', 'Right of Restriction'), ('objection', 'Right of Objection'), ('automated_decision', 'Right to Automated Decision Making')], max_length=20)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Request Description')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('response_details', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Response Details')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Data Subject Request',
                'verbose_name_plural': 'Data Subject Requests',
                'constraints': [models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_datasubject')],
            },
        ),
        migrations.AddConstraint(
            model_name='financialcontrolframework',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_financialcontrolframework'),
        ),
        migrations.AddConstraint(
            model_name='financialcontrol',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_financialcontrol'),
        ),
        migrations.AddConstraint(
            model_name='financialcontroltest',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_financialcontroltest'),
        ),
        migrations.AddConstraint(
            model_name='informationasset',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_informationasset'),
        ),
        migrations.AddConstraint(
            model_name='ismsframework',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_ismsframework'),
        ),
        migrations.AddConstraint(
            model_name='privacyframework',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_privacyframework'),
        ),
        migrations.AddConstraint(
            model_name='securityincident',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_securityincident'),
        ),
        migrations.AddConstraint(
            model_name='segregationofduties',
            constraint=models.CheckConstraint(condition=models.Q(('organization__isnull', False)), name='organization_required_segregationofduties'),
        ),
    ]
