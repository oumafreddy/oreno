# Generated by Django 5.1.8 on 2025-05-12 13:43

import core.models.validators
import django.db.models.deletion
import django_ckeditor_5.fields
import django_fsm
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('audit', '0013_remove_engagement_project_objectives'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('organizations', '0006_organizationsettings_subscribed_apps'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='followupaction',
            name='recommendation',
        ),
        migrations.RemoveField(
            model_name='issue',
            name='working_papers',
        ),
        migrations.RemoveField(
            model_name='issueretest',
            name='recommendation',
        ),
        migrations.AddField(
            model_name='approval',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='auditworkplan',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='followupaction',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='followupaction',
            name='issue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='followup_actions', to='audit.issue', verbose_name='Issue'),
        ),
        migrations.AddField(
            model_name='issue',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='issueretest',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='issueretest',
            name='issue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='retests', to='audit.issue', verbose_name='Issue'),
        ),
        migrations.AddField(
            model_name='note',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='objective',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='procedure',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='recommendation',
            name='actual_remediation_date',
            field=models.DateField(blank=True, null=True, verbose_name='Actual Remediation Date'),
        ),
        migrations.AddField(
            model_name='recommendation',
            name='deleted_at',
            field=models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at'),
        ),
        migrations.AddField(
            model_name='recommendation',
            name='management_action_plan',
            field=django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Management Action Plan'),
        ),
        migrations.AddField(
            model_name='recommendation',
            name='remediation_deadline_date',
            field=models.DateField(blank=True, null=True, verbose_name='Remediation Deadline'),
        ),
        migrations.AddField(
            model_name='recommendation',
            name='remediation_status',
            field=models.CharField(choices=[('open', 'Open'), ('management_remediating', 'Management Remediating'), ('remediated_awaiting_verification', 'Remediated Awaiting Verification'), ('closed', 'Closed')], db_index=True, default='open', max_length=56, verbose_name='Remediation Status'),
        ),
        migrations.AlterField(
            model_name='issueretest',
            name='result',
            field=models.CharField(blank=True, choices=[('pass', 'Pass'), ('fail', 'Fail'), ('not_tested', 'Not Tested')], max_length=12, null=True, verbose_name='Retest Result'),
        ),
        migrations.AlterField(
            model_name='procedure',
            name='related_risks',
            field=django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Related Risks'),
        ),
        migrations.CreateModel(
            name='HistoricalApproval',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('object_id', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default='pending', help_text='Current approval state for this object.', max_length=20, verbose_name='Approval State')),
                ('comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approver', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to=models.Q(('app_label', 'audit'), ('model__in', ['issue', 'auditworkplan', 'engagement'])), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization')),
                ('requester', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Approval',
                'verbose_name_plural': 'historical Approvals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAuditWorkplan',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('state', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval state.', max_length=50, protected=True, verbose_name='Approval State')),
                ('code', models.CharField(db_index=True, help_text='Unique code for the audit workplan within the organization.', max_length=8, verbose_name='Workplan Code')),
                ('name', models.CharField(db_index=True, help_text='Name of the audit workplan.', max_length=512, verbose_name='Workplan Name')),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year to which the workplan applies.', verbose_name='Fiscal Year')),
                ('objectives', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed Objectives of the audit workplan.', max_length=512, null=True, verbose_name='Objectives')),
                ('creation_date', models.DateField(blank=True, editable=False, help_text='Date when this workplan was created.', verbose_name='Creation Date')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the audit workplan.', max_length=512, null=True, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Audit Workplan',
                'verbose_name_plural': 'historical Audit Workplans',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEngagement',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('state', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval state.', max_length=50, protected=True, verbose_name='Approval State')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the engagement within a workplan.', max_length=16, verbose_name='Engagement Code')),
                ('title', models.CharField(max_length=255, verbose_name='Engagement Title')),
                ('engagement_type', models.CharField(blank=True, default='Compliance Audit', max_length=80, null=True, verbose_name='Engagement Type')),
                ('project_start_date', models.DateField(verbose_name='Project Start Date')),
                ('target_end_date', models.DateField(blank=True, null=True, verbose_name='Target End Date')),
                ('executive_summary', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Executive Summary')),
                ('purpose', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Purpose')),
                ('background', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Background')),
                ('scope', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Scope')),
                ('conclusion_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Conclusion Description')),
                ('conclusion', models.CharField(choices=[('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('unsatisfactory', 'Unsatisfactory')], default='satisfactory', max_length=32, verbose_name='Conclusion')),
                ('project_status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('closed', 'Closed')], db_index=True, default='draft', max_length=32, verbose_name='Project Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('audit_workplan', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.auditworkplan', verbose_name='Audit Workplan')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Engagement',
                'verbose_name_plural': 'historical Engagements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFollowUpAction',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Action Description')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due Date')),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue')], default='open', max_length=16, verbose_name='Status')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('issue', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.issue', verbose_name='Issue')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Follow-Up Action',
                'verbose_name_plural': 'historical Follow-Up Actions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssue',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('code', models.CharField(db_index=True, max_length=16, verbose_name='Issue Code')),
                ('issue_title', models.CharField(db_index=True, max_length=512, verbose_name='Issue Title')),
                ('issue_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Issue Description')),
                ('root_cause', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Root Cause')),
                ('risks', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Risks')),
                ('date_identified', models.DateField(verbose_name='Date Identified')),
                ('issue_owner_email', models.EmailField(blank=True, help_text='If owner is not a user, enter their email here.', max_length=254, null=True)),
                ('issue_owner_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Issue Owner Title')),
                ('audit_procedures', django_ckeditor_5.fields.CKEditor5Field(default='Bank reconciliation reperformance', verbose_name='Audit Procedures')),
                ('severity_status', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], db_index=True, default='high', max_length=12, verbose_name='Severity')),
                ('issue_status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('closed', 'Closed')], db_index=True, default='open', max_length=56, verbose_name='Issue Status')),
                ('remediation_status', models.CharField(choices=[('open', 'Open'), ('management_remediating', 'Management Remediating'), ('remediated_awaiting_verification', 'Remediated Awaiting Verification'), ('closed', 'Closed')], db_index=True, default='open', max_length=56, verbose_name='Remediation Status')),
                ('remediation_deadline_date', models.DateField(blank=True, null=True, verbose_name='Remediation Deadline')),
                ('actual_remediation_date', models.DateField(blank=True, null=True, verbose_name='Actual Remediation Date')),
                ('management_action_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Management Action Plan')),
                ('positive_finding_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Positive Finding Notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('issue_owner', models.ForeignKey(blank=True, db_constraint=False, help_text='Select a user as owner, or leave blank to specify an email below.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Issue Owner')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('procedure_result', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.procedureresult', verbose_name='Procedure Result')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Issue',
                'verbose_name_plural': 'historical Issues',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssueRetest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('retest_date', models.DateField(blank=True, null=True, verbose_name='Retest Date')),
                ('result', models.CharField(blank=True, choices=[('pass', 'Pass'), ('fail', 'Fail'), ('not_tested', 'Not Tested')], max_length=12, null=True, verbose_name='Retest Result')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Retest Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('issue', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.issue', verbose_name='Issue')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('retested_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Retested By')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Issue Retest',
                'verbose_name_plural': 'historical Issue Retests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssueWorkingPaper',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('file', models.TextField(max_length=100, validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Working Paper File')),
                ('description', models.CharField(blank=True, help_text='Optional description for this working paper.', max_length=255, null=True, verbose_name='Description')),
                ('uploaded_at', models.DateTimeField(blank=True, editable=False, verbose_name='Uploaded At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('issue', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.issue', verbose_name='Issue')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Issue Working Paper',
                'verbose_name_plural': 'historical Issue Working Papers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNote',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('object_id', models.PositiveIntegerField()),
                ('note_type', models.CharField(choices=[('todo', 'To-Do'), ('review', 'Review'), ('review_request', 'Review Request'), ('general', 'General')], default='general', max_length=16, verbose_name='Note Type')),
                ('content', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Note Content')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('status', models.CharField(choices=[('open', 'Open'), ('cleared', 'Cleared by Owner'), ('closed', 'Closed by Supervisor')], default='open', max_length=16, verbose_name='Status')),
                ('cleared_at', models.DateTimeField(blank=True, null=True, verbose_name='Cleared At')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Closed At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('closed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Closed By')),
                ('content_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='Organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'historical Note',
                'verbose_name_plural': 'historical Notes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalObjective',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(max_length=255, verbose_name='Objective Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Objective Description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('engagement', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.engagement', verbose_name='Engagement')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Objective',
                'verbose_name_plural': 'historical Objectives',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProcedure',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(max_length=255, verbose_name='Procedure Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Procedure Description')),
                ('related_risks', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Related Risks')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('objective', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.objective', verbose_name='Objective')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Procedure',
                'verbose_name_plural': 'historical Procedures',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProcedureResult',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('status', models.CharField(choices=[('operating_effectively', 'Operating Effectively'), ('not_effective', 'Not Effective'), ('for_the_record', 'For the Record')], max_length=32, verbose_name='Result Status')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Notes')),
                ('is_for_the_record', models.BooleanField(default=False, verbose_name='Just for the Record')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('is_positive', models.BooleanField(default=False, verbose_name='Positive Result')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('procedure', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.procedure', verbose_name='Procedure')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Procedure Result',
                'verbose_name_plural': 'historical Procedure Results',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRecommendation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(max_length=255, verbose_name='Recommendation Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Recommendation Description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('remediation_status', models.CharField(choices=[('open', 'Open'), ('management_remediating', 'Management Remediating'), ('remediated_awaiting_verification', 'Remediated Awaiting Verification'), ('closed', 'Closed')], db_index=True, default='open', max_length=56, verbose_name='Remediation Status')),
                ('remediation_deadline_date', models.DateField(blank=True, null=True, verbose_name='Remediation Deadline')),
                ('actual_remediation_date', models.DateField(blank=True, null=True, verbose_name='Actual Remediation Date')),
                ('management_action_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Management Action Plan')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('issue', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='audit.issue', verbose_name='Issue')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Organization that owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'historical Recommendation',
                'verbose_name_plural': 'historical Recommendations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='IssueWorkingPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('file', models.FileField(upload_to='working_papers/', validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Working Paper File')),
                ('description', models.CharField(blank=True, help_text='Optional description for this working paper.', max_length=255, null=True, verbose_name='Description')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='working_papers', to='audit.issue', verbose_name='Issue')),
                ('organization', models.ForeignKey(help_text='Organization that owns this record', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='organizations.organization', verbose_name='organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'verbose_name': 'Issue Working Paper',
                'verbose_name_plural': 'Issue Working Papers',
                'ordering': ['-uploaded_at'],
            },
        ),
    ]
