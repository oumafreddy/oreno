# Generated by Django 5.1.8 on 2025-06-10 16:26

import core.models.validators
import django.core.validators
import django_ckeditor_5.fields
import django_fsm
import simple_history.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Approval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('object_id', models.PositiveIntegerField(help_text='The ID of the object requiring approval', verbose_name='Object ID')),
                ('approval_type', models.CharField(choices=[('review', 'Review'), ('sign_off', 'Sign-off'), ('validation', 'Validation'), ('extension', 'Extension'), ('risk_acceptance', 'Risk Acceptance'), ('final_approval', 'Final Approval')], default='review', help_text='Type of approval being requested', max_length=20, verbose_name='Approval Type')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default='pending', help_text='Current approval state for this object', max_length=20, verbose_name='Approval State')),
                ('comments', models.TextField(blank=True, help_text='Additional comments about the approval decision', verbose_name='Comments')),
                ('due_date', models.DateField(blank=True, help_text='Date by which approval should be completed', null=True, verbose_name='Due Date')),
                ('reminder_sent', models.BooleanField(default=False, help_text='Whether a reminder has been sent to the approver', verbose_name='Reminder Sent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Approval',
                'verbose_name_plural': 'Approvals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditWorkplan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('state', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval state.', max_length=50, protected=True, verbose_name='Approval State')),
                ('code', models.CharField(db_index=True, help_text='Unique code for the audit workplan within the organization.', max_length=8, verbose_name='Workplan Code')),
                ('name', models.CharField(db_index=True, help_text='Name of the audit workplan.', max_length=512, verbose_name='Workplan Name')),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year to which the workplan applies.', verbose_name='Fiscal Year')),
                ('estimated_total_hours', models.PositiveIntegerField(default=0, help_text='Estimated total audit hours for the entire workplan.', verbose_name='Estimated Total Hours')),
                ('priority_ranking', models.PositiveSmallIntegerField(default=1, help_text='Priority ranking of this workplan (1 = highest)', verbose_name='Priority Ranking')),
                ('approval_status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval status of the workplan', max_length=20, verbose_name='Approval Status')),
                ('approved_date', models.DateField(blank=True, help_text='Date when this workplan was approved.', null=True, verbose_name='Approved Date')),
                ('objectives', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed Objectives of the audit workplan.', max_length=512, null=True, verbose_name='Objectives')),
                ('creation_date', models.DateField(auto_now_add=True, help_text='Date when this workplan was created.', verbose_name='Creation Date')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the audit workplan.', max_length=512, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Annual Workplan',
                'verbose_name_plural': 'Annual Workplans',
                'ordering': ['-creation_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('state', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval state.', max_length=50, protected=True, verbose_name='Approval State')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the engagement within a workplan.', max_length=16, verbose_name='Engagement Code')),
                ('title', models.CharField(help_text='Title of the audit engagement', max_length=255, verbose_name='Engagement Title')),
                ('criteria', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Standards, regulations, or policies that form the basis for evaluation', null=True, verbose_name='Audit Criteria')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated audit hours for this engagement', verbose_name='Estimated Hours')),
                ('engagement_type', models.CharField(blank=True, default='Compliance Audit', max_length=80, null=True, verbose_name='Engagement Type')),
                ('project_start_date', models.DateField(help_text='Actual start date of the audit engagement', verbose_name='Project Start Date')),
                ('target_end_date', models.DateField(blank=True, null=True, verbose_name='Target End Date')),
                ('executive_summary', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Executive Summary')),
                ('purpose', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Purpose')),
                ('background', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Background')),
                ('scope', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Scope')),
                ('conclusion_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Conclusion Description')),
                ('conclusion', models.CharField(choices=[('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('unsatisfactory', 'Unsatisfactory'), ('significant_improvement_needed', 'Significant Improvement Needed'), ('not_rated', 'Not Rated')], default='satisfactory', max_length=32, verbose_name='Conclusion')),
                ('project_status', models.CharField(choices=[('planning', 'Planning'), ('fieldwork', 'Fieldwork'), ('reporting', 'Reporting'), ('review', 'Review'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], db_index=True, default='planning', help_text='Current status of the audit engagement', max_length=32, verbose_name='Project Status')),
                ('field_work_start_date', models.DateField(blank=True, help_text='Date when fieldwork began', null=True, verbose_name='Fieldwork Start Date')),
                ('field_work_end_date', models.DateField(blank=True, help_text='Date when fieldwork was completed', null=True, verbose_name='Fieldwork End Date')),
                ('report_issued_date', models.DateField(blank=True, help_text='Date when final report was issued', null=True, verbose_name='Report Issued Date')),
                ('approval_status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted for Review'), ('reviewed', 'Reviewed'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval status of the engagement', max_length=20, verbose_name='Approval Status')),
                ('approved_date', models.DateField(blank=True, help_text='Date when this engagement was approved', null=True, verbose_name='Approved Date')),
            ],
            options={
                'verbose_name': 'Engagement',
                'verbose_name_plural': 'Engagements',
                'ordering': ['-project_start_date', 'code'],
            },
        ),
        migrations.CreateModel(
            name='FollowUpAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(help_text='Brief title of the follow-up action', max_length=255, verbose_name='Action Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the follow-up action', null=True, verbose_name='Action Description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this follow-up action', max_length=10, verbose_name='Priority')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to complete this action', verbose_name='Estimated Hours')),
                ('assigned_team', models.CharField(blank=True, help_text='Team responsible for this action', max_length=100, null=True, verbose_name='Assigned Team')),
                ('start_date', models.DateField(blank=True, help_text='Date when this action was started', null=True, verbose_name='Start Date')),
                ('due_date', models.DateField(blank=True, help_text='Date by which this action should be completed', null=True, verbose_name='Due Date')),
                ('revised_due_date', models.DateField(blank=True, help_text='Revised date if extended', null=True, verbose_name='Revised Due Date')),
                ('extension_reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Reason for extending the due date', null=True, verbose_name='Extension Reason')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue'), ('deferred', 'Deferred'), ('cancelled', 'Cancelled')], default='not_started', help_text='Current status of this action', max_length=16, verbose_name='Status')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Date and time when this action was completed', null=True, verbose_name='Completed At')),
                ('completion_evidence', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Evidence of action completion', null=True, verbose_name='Completion Evidence')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Additional notes about this follow-up action', null=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Follow-Up Action',
                'verbose_name_plural': 'Follow-Up Actions',
                'ordering': ['priority', 'due_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalApproval',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('object_id', models.PositiveIntegerField(help_text='The ID of the object requiring approval', verbose_name='Object ID')),
                ('approval_type', models.CharField(choices=[('review', 'Review'), ('sign_off', 'Sign-off'), ('validation', 'Validation'), ('extension', 'Extension'), ('risk_acceptance', 'Risk Acceptance'), ('final_approval', 'Final Approval')], default='review', help_text='Type of approval being requested', max_length=20, verbose_name='Approval Type')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default='pending', help_text='Current approval state for this object', max_length=20, verbose_name='Approval State')),
                ('comments', models.TextField(blank=True, help_text='Additional comments about the approval decision', verbose_name='Comments')),
                ('due_date', models.DateField(blank=True, help_text='Date by which approval should be completed', null=True, verbose_name='Due Date')),
                ('reminder_sent', models.BooleanField(default=False, help_text='Whether a reminder has been sent to the approver', verbose_name='Reminder Sent')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Approval',
                'verbose_name_plural': 'historical Approvals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAuditWorkplan',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('state', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval state.', max_length=50, protected=True, verbose_name='Approval State')),
                ('code', models.CharField(db_index=True, help_text='Unique code for the audit workplan within the organization.', max_length=8, verbose_name='Workplan Code')),
                ('name', models.CharField(db_index=True, help_text='Name of the audit workplan.', max_length=512, verbose_name='Workplan Name')),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year to which the workplan applies.', verbose_name='Fiscal Year')),
                ('estimated_total_hours', models.PositiveIntegerField(default=0, help_text='Estimated total audit hours for the entire workplan.', verbose_name='Estimated Total Hours')),
                ('priority_ranking', models.PositiveSmallIntegerField(default=1, help_text='Priority ranking of this workplan (1 = highest)', verbose_name='Priority Ranking')),
                ('approval_status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval status of the workplan', max_length=20, verbose_name='Approval Status')),
                ('approved_date', models.DateField(blank=True, help_text='Date when this workplan was approved.', null=True, verbose_name='Approved Date')),
                ('objectives', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed Objectives of the audit workplan.', max_length=512, null=True, verbose_name='Objectives')),
                ('creation_date', models.DateField(blank=True, editable=False, help_text='Date when this workplan was created.', verbose_name='Creation Date')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the audit workplan.', max_length=512, null=True, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Annual Workplan',
                'verbose_name_plural': 'historical Annual Workplans',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEngagement',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('state', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval state.', max_length=50, protected=True, verbose_name='Approval State')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the engagement within a workplan.', max_length=16, verbose_name='Engagement Code')),
                ('title', models.CharField(help_text='Title of the audit engagement', max_length=255, verbose_name='Engagement Title')),
                ('criteria', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Standards, regulations, or policies that form the basis for evaluation', null=True, verbose_name='Audit Criteria')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated audit hours for this engagement', verbose_name='Estimated Hours')),
                ('engagement_type', models.CharField(blank=True, default='Compliance Audit', max_length=80, null=True, verbose_name='Engagement Type')),
                ('project_start_date', models.DateField(help_text='Actual start date of the audit engagement', verbose_name='Project Start Date')),
                ('target_end_date', models.DateField(blank=True, null=True, verbose_name='Target End Date')),
                ('executive_summary', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Executive Summary')),
                ('purpose', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Purpose')),
                ('background', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Background')),
                ('scope', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Scope')),
                ('conclusion_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Conclusion Description')),
                ('conclusion', models.CharField(choices=[('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('unsatisfactory', 'Unsatisfactory'), ('significant_improvement_needed', 'Significant Improvement Needed'), ('not_rated', 'Not Rated')], default='satisfactory', max_length=32, verbose_name='Conclusion')),
                ('project_status', models.CharField(choices=[('planning', 'Planning'), ('fieldwork', 'Fieldwork'), ('reporting', 'Reporting'), ('review', 'Review'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], db_index=True, default='planning', help_text='Current status of the audit engagement', max_length=32, verbose_name='Project Status')),
                ('field_work_start_date', models.DateField(blank=True, help_text='Date when fieldwork began', null=True, verbose_name='Fieldwork Start Date')),
                ('field_work_end_date', models.DateField(blank=True, help_text='Date when fieldwork was completed', null=True, verbose_name='Fieldwork End Date')),
                ('report_issued_date', models.DateField(blank=True, help_text='Date when final report was issued', null=True, verbose_name='Report Issued Date')),
                ('approval_status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted for Review'), ('reviewed', 'Reviewed'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Current approval status of the engagement', max_length=20, verbose_name='Approval Status')),
                ('approved_date', models.DateField(blank=True, help_text='Date when this engagement was approved', null=True, verbose_name='Approved Date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Engagement',
                'verbose_name_plural': 'historical Engagements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFollowUpAction',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(help_text='Brief title of the follow-up action', max_length=255, verbose_name='Action Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the follow-up action', null=True, verbose_name='Action Description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this follow-up action', max_length=10, verbose_name='Priority')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to complete this action', verbose_name='Estimated Hours')),
                ('assigned_team', models.CharField(blank=True, help_text='Team responsible for this action', max_length=100, null=True, verbose_name='Assigned Team')),
                ('start_date', models.DateField(blank=True, help_text='Date when this action was started', null=True, verbose_name='Start Date')),
                ('due_date', models.DateField(blank=True, help_text='Date by which this action should be completed', null=True, verbose_name='Due Date')),
                ('revised_due_date', models.DateField(blank=True, help_text='Revised date if extended', null=True, verbose_name='Revised Due Date')),
                ('extension_reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Reason for extending the due date', null=True, verbose_name='Extension Reason')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue'), ('deferred', 'Deferred'), ('cancelled', 'Cancelled')], default='not_started', help_text='Current status of this action', max_length=16, verbose_name='Status')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Date and time when this action was completed', null=True, verbose_name='Completed At')),
                ('completion_evidence', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Evidence of action completion', null=True, verbose_name='Completion Evidence')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Additional notes about this follow-up action', null=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Follow-Up Action',
                'verbose_name_plural': 'historical Follow-Up Actions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssue',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('code', models.CharField(db_index=True, max_length=16, verbose_name='Issue Code')),
                ('issue_title', models.CharField(db_index=True, max_length=512, verbose_name='Issue Title')),
                ('issue_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Issue Description')),
                ('root_cause', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Root Cause')),
                ('risks', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Risks')),
                ('date_identified', models.DateField(verbose_name='Date Identified')),
                ('issue_owner_email', models.EmailField(blank=True, help_text='If owner is not a user, enter their email here.', max_length=254, null=True)),
                ('issue_owner_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Issue Owner Title')),
                ('audit_procedures', django_ckeditor_5.fields.CKEditor5Field(default='Bank reconciliation reperformance', verbose_name='Audit Procedures')),
                ('issue_type', models.CharField(choices=[('control_deficiency', 'Control Deficiency'), ('significant_deficiency', 'Significant Deficiency'), ('material_weakness', 'Material Weakness'), ('compliance', 'Compliance Issue'), ('process_improvement', 'Process Improvement'), ('fraud', 'Fraud'), ('ethics', 'Ethics Violation'), ('security', 'Security Issue'), ('data_privacy', 'Data Privacy'), ('regulatory', 'Regulatory'), ('other', 'Other')], db_index=True, default='control_deficiency', help_text='Classification of the issue according to GIAS 2024 standards', max_length=30, verbose_name='Issue Type')),
                ('is_repeat_issue', models.BooleanField(default=False, help_text='Indicates if this issue was identified in a previous audit', verbose_name='Repeat Issue')),
                ('prior_issue_reference', models.CharField(blank=True, help_text='Reference to previous audit issue if this is a repeat finding', max_length=50, null=True, verbose_name='Prior Issue Reference')),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], db_index=True, default='low', max_length=12, verbose_name='Risk Level')),
                ('impact', models.IntegerField(choices=[(1, 'Minor'), (2, 'Moderate'), (3, 'Major')], db_index=True, default=1, verbose_name='Impact')),
                ('likelihood', models.IntegerField(choices=[(1, 'Unlikely'), (2, 'Possible'), (3, 'Likely')], db_index=True, default=1, verbose_name='Likelihood')),
                ('risk_score', models.PositiveSmallIntegerField(default=1, help_text='Calculated as Impact × Likelihood', verbose_name='Risk Score')),
                ('business_impact', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of how this issue impacts the business', null=True, verbose_name='Business Impact')),
                ('financial_impact', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated financial impact in monetary terms', max_digits=14, null=True, verbose_name='Financial Impact')),
                ('regulatory_impact', models.BooleanField(default=False, help_text='Indicates if this issue has regulatory implications', verbose_name='Regulatory Impact')),
                ('reputational_impact', models.BooleanField(default=False, help_text='Indicates if this issue could affect organizational reputation', verbose_name='Reputational Impact')),
                ('days_overdue', models.PositiveIntegerField(default=0, help_text='Number of days the issue is past its target or revised date', verbose_name='Days Overdue')),
                ('issue_status', models.CharField(choices=[('draft', 'Draft'), ('open', 'Open'), ('in_progress', 'In Progress'), ('pending_validation', 'Pending Validation'), ('pending_review', 'Pending Review'), ('pending_approval', 'Pending Approval'), ('closed', 'Closed'), ('reopened', 'Reopened'), ('extended', 'Extended'), ('escalated', 'Escalated'), ('accepted_risk', 'Accepted Risk'), ('deferred', 'Deferred'), ('transferred', 'Transferred')], db_index=True, default='open', max_length=56, verbose_name='Issue Status')),
                ('remediation_status', models.CharField(choices=[('open', 'Open'), ('planned', 'Planned'), ('management_remediating', 'Management Remediating'), ('remediated_awaiting_verification', 'Remediated Awaiting Verification'), ('partially_remediated', 'Partially Remediated'), ('verified', 'Verified'), ('closed', 'Closed'), ('ineffective_remediation', 'Ineffective Remediation')], db_index=True, default='open', max_length=56, verbose_name='Remediation Status')),
                ('target_date', models.DateField(blank=True, help_text='Target date for remediation', null=True, verbose_name='Target Date')),
                ('remediation_plan_date', models.DateField(blank=True, help_text='Date when the remediation plan was submitted', null=True, verbose_name='Remediation Plan Date')),
                ('remediation_priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level for remediation efforts', max_length=10, verbose_name='Remediation Priority')),
                ('estimated_effort', models.PositiveIntegerField(blank=True, help_text='Estimated hours required to remediate this issue', null=True, verbose_name='Estimated Effort (hours)')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated cost to remediate this issue', max_digits=14, null=True, verbose_name='Estimated Cost')),
                ('revised_date', models.DateField(blank=True, help_text='Revised target date if extended', null=True, verbose_name='Revised Date')),
                ('extension_reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Reason for extending the target date', null=True, verbose_name='Extension Reason')),
                ('extension_approved_date', models.DateField(blank=True, null=True, verbose_name='Extension Approved Date')),
                ('actual_remediation_date', models.DateField(blank=True, null=True, verbose_name='Actual Remediation Date')),
                ('management_action_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed plan from management to address the issue', null=True, verbose_name='Management Action Plan')),
                ('remediation_approach', models.CharField(choices=[('fix', 'Fix'), ('mitigate', 'Mitigate'), ('accept', 'Accept'), ('transfer', 'Transfer'), ('avoid', 'Avoid')], default='fix', help_text='The approach taken to address this issue', max_length=20, verbose_name='Remediation Approach')),
                ('verification_method', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Method to be used to verify remediation', null=True, verbose_name='Verification Method')),
                ('verification_result', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Results of remediation verification testing', null=True, verbose_name='Verification Result')),
                ('verification_date', models.DateField(blank=True, help_text='Date when remediation was verified', null=True, verbose_name='Verification Date')),
                ('positive_finding_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Positive Finding Notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Issue',
                'verbose_name_plural': 'historical Issues',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssueRetest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('scheduled_date', models.DateField(blank=True, help_text='Date when retest is scheduled to occur', null=True, verbose_name='Scheduled Date')),
                ('retest_date', models.DateField(blank=True, help_text='Date when retest was actually performed', null=True, verbose_name='Retest Date')),
                ('result', models.CharField(choices=[('pass', 'Pass'), ('fail', 'Fail'), ('partially_effective', 'Partially Effective'), ('pending_testing', 'Pending Testing'), ('blocked', 'Blocked'), ('not_applicable', 'Not Applicable')], default='pending_testing', help_text='Result of the retest verification', max_length=20, verbose_name='Retest Result')),
                ('test_approach', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of the testing approach used', null=True, verbose_name='Test Approach')),
                ('test_evidence', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Evidence collected during the retest', null=True, verbose_name='Test Evidence')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Additional notes about the retest', null=True, verbose_name='Retest Notes')),
                ('verification_status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rescheduled', 'Rescheduled'), ('cancelled', 'Cancelled')], default='scheduled', help_text='Current status of the verification process', max_length=20, verbose_name='Verification Status')),
                ('review_date', models.DateField(blank=True, help_text='Date when retest results were reviewed', null=True, verbose_name='Review Date')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Issue Retest',
                'verbose_name_plural': 'historical Issue Retests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssueWorkingPaper',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('file', models.TextField(max_length=100, validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Working Paper File')),
                ('description', models.CharField(blank=True, help_text='Optional description for this working paper.', max_length=255, null=True, verbose_name='Description')),
                ('uploaded_at', models.DateTimeField(blank=True, editable=False, verbose_name='Uploaded At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Issue Working Paper',
                'verbose_name_plural': 'historical Issue Working Papers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNote',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('object_id', models.PositiveIntegerField()),
                ('note_type', models.CharField(choices=[('todo', 'To-Do'), ('review', 'Review'), ('review_request', 'Review Request'), ('general', 'General')], default='general', max_length=16, verbose_name='Note Type')),
                ('content', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Note Content')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('status', models.CharField(choices=[('open', 'Open'), ('cleared', 'Cleared by Owner'), ('closed', 'Closed by Supervisor')], default='open', max_length=16, verbose_name='Status')),
                ('cleared_at', models.DateTimeField(blank=True, null=True, verbose_name='Cleared At')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Closed At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Note',
                'verbose_name_plural': 'historical Notes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalObjective',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(help_text='Title of the audit objective', max_length=255, verbose_name='Objective Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the audit objective', null=True, verbose_name='Objective Description')),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Priority level of this objective', max_length=20, verbose_name='Priority')),
                ('criteria', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Standards, regulations, or policies that form the basis for evaluation', null=True, verbose_name='Audit Criteria')),
                ('start_date', models.DateField(blank=True, help_text='Date when work on this objective started', null=True, verbose_name='Start Date')),
                ('completion_date', models.DateField(blank=True, help_text='Date when this objective was completed', null=True, verbose_name='Completion Date')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('deferred', 'Deferred')], default='not_started', help_text='Current status of this objective', max_length=20, verbose_name='Status')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to complete this objective', verbose_name='Estimated Hours')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the engagement', verbose_name='Order')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Objective',
                'verbose_name_plural': 'historical Objectives',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProcedure',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('procedure_type', models.CharField(choices=[('inspection', 'Inspection'), ('observation', 'Observation'), ('inquiry', 'Inquiry'), ('confirmation', 'Confirmation'), ('reperformance', 'Reperformance'), ('analytical', 'Analytical Procedure'), ('substantive', 'Substantive Testing'), ('walkthrough', 'Walkthrough'), ('compliance', 'Compliance Test')], default='inspection', help_text='The type of audit procedure being performed', max_length=20, verbose_name='Procedure Type')),
                ('title', models.CharField(help_text='Test procedure title', max_length=255, verbose_name='Procedure Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed test steps and methodology', null=True, verbose_name='Procedure Description')),
                ('control_being_tested', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of the specific control being evaluated', null=True, verbose_name='Control Being Tested')),
                ('criteria', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Standards, policies or benchmarks used to evaluate the control', null=True, verbose_name='Audit Criteria')),
                ('sample_size', models.PositiveIntegerField(default=0, help_text='Number of items tested', verbose_name='Sample Size')),
                ('sampling_method', models.CharField(blank=True, help_text='Method used to select samples', max_length=100, null=True, verbose_name='Sampling Method')),
                ('planned_date', models.DateField(blank=True, help_text='Date when testing is planned to be performed', null=True, verbose_name='Planned Test Date')),
                ('test_date', models.DateField(blank=True, help_text='Date when testing was actually performed', null=True, verbose_name='Actual Test Date')),
                ('estimated_hours', models.DecimalField(decimal_places=2, default=0, help_text='Estimated time to complete this procedure', max_digits=6, verbose_name='Estimated Hours')),
                ('actual_hours', models.DecimalField(decimal_places=2, default=0, help_text='Actual time spent on this procedure', max_digits=6, verbose_name='Actual Hours')),
                ('test_status', models.CharField(choices=[('not_started', 'Not Started'), ('planning', 'Planning'), ('in_progress', 'In Progress'), ('pending_review', 'Pending Review'), ('completed', 'Completed'), ('deferred', 'Deferred'), ('cancelled', 'Cancelled')], default='not_started', help_text='Current status of testing', max_length=32, verbose_name='Test Status')),
                ('result', models.CharField(blank=True, choices=[('operating_effectively', 'Operating Effectively'), ('not_effective', 'Not Effective'), ('partially_effective', 'Partially Effective'), ('design_effective_operating_ineffective', 'Design Effective, Operating Ineffective'), ('design_ineffective', 'Design Ineffective'), ('inconsistent_application', 'Inconsistent Application'), ('not_applicable', 'Not Applicable'), ('not_tested', 'Not Tested'), ('needs_improvement', 'Needs Improvement')], help_text='Outcome of the test procedure', max_length=40, null=True, verbose_name='Test Result')),
                ('result_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed observations from testing', null=True, verbose_name='Result Notes')),
                ('exceptions_noted', models.PositiveIntegerField(default=0, help_text='Number of exceptions identified during testing', verbose_name='Exceptions Noted')),
                ('exception_details', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Details of any exceptions identified', null=True, verbose_name='Exception Details')),
                ('conclusion', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text="Auditor's conclusion based on test results", null=True, verbose_name='Conclusion')),
                ('impact_assessment', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Assessment of the impact of any identified exceptions', null=True, verbose_name='Impact Assessment')),
                ('is_positive_finding', models.BooleanField(default=False, help_text='Indicates a positive outcome worth highlighting', verbose_name='Positive Finding')),
                ('control_maturity', models.PositiveSmallIntegerField(blank=True, help_text='Rating of control maturity on a scale of 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Control Maturity')),
                ('evidence_list', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='List of evidence gathered during testing', null=True, verbose_name='Evidence List')),
                ('evidence', models.TextField(blank=True, help_text='Primary supporting documentation for test results', max_length=100, null=True, validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Primary Evidence')),
                ('additional_evidence', models.TextField(blank=True, help_text='Additional supporting documentation for test results', max_length=100, null=True, validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Additional Evidence')),
                ('review_date', models.DateField(blank=True, help_text='Date when the procedure was reviewed', null=True, verbose_name='Review Date')),
                ('review_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Notes from the reviewer', null=True, verbose_name='Review Notes')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the risk', verbose_name='Order')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Procedure',
                'verbose_name_plural': 'historical Procedures',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProcedureResult',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('status', models.CharField(choices=[('operating_effectively', 'Operating Effectively'), ('not_effective', 'Not Effective'), ('for_the_record', 'For the Record')], max_length=32, verbose_name='Result Status')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Notes')),
                ('is_for_the_record', models.BooleanField(default=False, verbose_name='Just for the Record')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('is_positive', models.BooleanField(default=False, verbose_name='Positive Result')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Procedure Result',
                'verbose_name_plural': 'historical Procedure Results',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRecommendation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(help_text='Title of the recommendation', max_length=255, verbose_name='Recommendation Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the recommendation', null=True, verbose_name='Recommendation Description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this recommendation', max_length=10, verbose_name='Priority')),
                ('cost_benefit_analysis', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Analysis of costs and benefits of implementing this recommendation', null=True, verbose_name='Cost-Benefit Analysis')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to implement this recommendation', verbose_name='Estimated Hours')),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=0, help_text='Estimated cost to implement this recommendation', max_digits=12, verbose_name='Estimated Cost')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the issue', verbose_name='Order')),
                ('implementation_status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('implemented', 'Implemented'), ('verified', 'Verified'), ('accepted_risk', 'Risk Accepted'), ('rejected', 'Rejected'), ('deferred', 'Deferred')], db_index=True, default='not_started', help_text='Current status of recommendation implementation', max_length=20, verbose_name='Implementation Status')),
                ('target_date', models.DateField(blank=True, help_text='Target date for implementing this recommendation', null=True, verbose_name='Target Date')),
                ('revised_date', models.DateField(blank=True, help_text='Revised target date if extended', null=True, verbose_name='Revised Date')),
                ('extension_reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Reason for extending the target date', null=True, verbose_name='Extension Reason')),
                ('implementation_date', models.DateField(blank=True, help_text='Date when this recommendation was implemented', null=True, verbose_name='Implementation Date')),
                ('verification_date', models.DateField(blank=True, help_text='Date when implementation was verified', null=True, verbose_name='Verification Date')),
                ('management_action_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed plan for implementing this recommendation', null=True, verbose_name='Management Action Plan')),
                ('effectiveness_evaluation', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Evaluation of how effective the implemented recommendation is', null=True, verbose_name='Effectiveness Evaluation')),
                ('effectiveness_rating', models.CharField(choices=[('not_evaluated', 'Not Evaluated'), ('ineffective', 'Ineffective'), ('partially_effective', 'Partially Effective'), ('effective', 'Effective'), ('highly_effective', 'Highly Effective')], default='not_evaluated', help_text='Rating of the effectiveness of this recommendation', max_length=20, verbose_name='Effectiveness Rating')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Recommendation',
                'verbose_name_plural': 'historical Recommendations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRisk',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('title', models.CharField(help_text='Concise title describing the risk', max_length=255, verbose_name='Risk Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the risk', null=True, verbose_name='Risk Description')),
                ('category', models.CharField(choices=[('strategic', 'Strategic'), ('operational', 'Operational'), ('financial', 'Financial'), ('compliance', 'Compliance'), ('reputational', 'Reputational'), ('technological', 'Technological'), ('environmental', 'Environmental'), ('fraud', 'Fraud'), ('human_resources', 'Human Resources'), ('legal', 'Legal'), ('governance', 'Governance'), ('other', 'Other')], default='operational', help_text='Primary category of the risk', max_length=20, verbose_name='Risk Category')),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('assessed', 'Assessed'), ('mitigated', 'Mitigated'), ('accepted', 'Accepted'), ('transferred', 'Transferred'), ('closed', 'Closed')], default='identified', help_text='Current status in the risk management lifecycle', max_length=20, verbose_name='Risk Status')),
                ('risk_appetite', models.CharField(choices=[('averse', 'Risk Averse'), ('minimalist', 'Minimalist'), ('cautious', 'Cautious'), ('open', 'Open'), ('seeking', 'Risk Seeking')], default='cautious', help_text="Organization's willingness to accept this type of risk", max_length=15, verbose_name='Risk Appetite')),
                ('risk_tolerance', models.PositiveSmallIntegerField(default=4, help_text='Maximum acceptable risk level (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], verbose_name='Risk Tolerance')),
                ('existing_controls', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of controls already in place to mitigate this risk', null=True, verbose_name='Existing Controls')),
                ('control_effectiveness', models.PositiveSmallIntegerField(default=2, help_text='Effectiveness of existing controls (1=Low, 2=Medium, 3=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Control Effectiveness')),
                ('mitigation_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Action plan to address or mitigate this risk', null=True, verbose_name='Mitigation Plan')),
                ('target_date', models.DateField(blank=True, help_text='Target date for implementing risk mitigation measures', null=True, verbose_name='Target Date')),
                ('likelihood', models.PositiveSmallIntegerField(default=2, help_text='Likelihood score (1=Low, 2=Medium, 3=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Likelihood')),
                ('impact', models.PositiveSmallIntegerField(default=2, help_text='Impact score (1=Low, 2=Medium, 3=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Impact')),
                ('inherent_risk_score', models.PositiveSmallIntegerField(default=4, help_text='Calculated as Likelihood × Impact (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], verbose_name='Inherent Risk Score')),
                ('residual_risk_score', models.PositiveSmallIntegerField(default=4, help_text='Remaining risk after considering existing controls (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], verbose_name='Residual Risk Score')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the objective', verbose_name='Order')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Risk',
                'verbose_name_plural': 'historical Risks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('code', models.CharField(db_index=True, max_length=16, verbose_name='Issue Code')),
                ('issue_title', models.CharField(db_index=True, max_length=512, verbose_name='Issue Title')),
                ('issue_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Issue Description')),
                ('root_cause', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Root Cause')),
                ('risks', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Risks')),
                ('date_identified', models.DateField(verbose_name='Date Identified')),
                ('issue_owner_email', models.EmailField(blank=True, help_text='If owner is not a user, enter their email here.', max_length=254, null=True)),
                ('issue_owner_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Issue Owner Title')),
                ('audit_procedures', django_ckeditor_5.fields.CKEditor5Field(default='Bank reconciliation reperformance', verbose_name='Audit Procedures')),
                ('issue_type', models.CharField(choices=[('control_deficiency', 'Control Deficiency'), ('significant_deficiency', 'Significant Deficiency'), ('material_weakness', 'Material Weakness'), ('compliance', 'Compliance Issue'), ('process_improvement', 'Process Improvement'), ('fraud', 'Fraud'), ('ethics', 'Ethics Violation'), ('security', 'Security Issue'), ('data_privacy', 'Data Privacy'), ('regulatory', 'Regulatory'), ('other', 'Other')], db_index=True, default='control_deficiency', help_text='Classification of the issue according to GIAS 2024 standards', max_length=30, verbose_name='Issue Type')),
                ('is_repeat_issue', models.BooleanField(default=False, help_text='Indicates if this issue was identified in a previous audit', verbose_name='Repeat Issue')),
                ('prior_issue_reference', models.CharField(blank=True, help_text='Reference to previous audit issue if this is a repeat finding', max_length=50, null=True, verbose_name='Prior Issue Reference')),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], db_index=True, default='low', max_length=12, verbose_name='Risk Level')),
                ('impact', models.IntegerField(choices=[(1, 'Minor'), (2, 'Moderate'), (3, 'Major')], db_index=True, default=1, verbose_name='Impact')),
                ('likelihood', models.IntegerField(choices=[(1, 'Unlikely'), (2, 'Possible'), (3, 'Likely')], db_index=True, default=1, verbose_name='Likelihood')),
                ('risk_score', models.PositiveSmallIntegerField(default=1, help_text='Calculated as Impact × Likelihood', verbose_name='Risk Score')),
                ('business_impact', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of how this issue impacts the business', null=True, verbose_name='Business Impact')),
                ('financial_impact', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated financial impact in monetary terms', max_digits=14, null=True, verbose_name='Financial Impact')),
                ('regulatory_impact', models.BooleanField(default=False, help_text='Indicates if this issue has regulatory implications', verbose_name='Regulatory Impact')),
                ('reputational_impact', models.BooleanField(default=False, help_text='Indicates if this issue could affect organizational reputation', verbose_name='Reputational Impact')),
                ('days_overdue', models.PositiveIntegerField(default=0, help_text='Number of days the issue is past its target or revised date', verbose_name='Days Overdue')),
                ('issue_status', models.CharField(choices=[('draft', 'Draft'), ('open', 'Open'), ('in_progress', 'In Progress'), ('pending_validation', 'Pending Validation'), ('pending_review', 'Pending Review'), ('pending_approval', 'Pending Approval'), ('closed', 'Closed'), ('reopened', 'Reopened'), ('extended', 'Extended'), ('escalated', 'Escalated'), ('accepted_risk', 'Accepted Risk'), ('deferred', 'Deferred'), ('transferred', 'Transferred')], db_index=True, default='open', max_length=56, verbose_name='Issue Status')),
                ('remediation_status', models.CharField(choices=[('open', 'Open'), ('planned', 'Planned'), ('management_remediating', 'Management Remediating'), ('remediated_awaiting_verification', 'Remediated Awaiting Verification'), ('partially_remediated', 'Partially Remediated'), ('verified', 'Verified'), ('closed', 'Closed'), ('ineffective_remediation', 'Ineffective Remediation')], db_index=True, default='open', max_length=56, verbose_name='Remediation Status')),
                ('target_date', models.DateField(blank=True, help_text='Target date for remediation', null=True, verbose_name='Target Date')),
                ('remediation_plan_date', models.DateField(blank=True, help_text='Date when the remediation plan was submitted', null=True, verbose_name='Remediation Plan Date')),
                ('remediation_priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level for remediation efforts', max_length=10, verbose_name='Remediation Priority')),
                ('estimated_effort', models.PositiveIntegerField(blank=True, help_text='Estimated hours required to remediate this issue', null=True, verbose_name='Estimated Effort (hours)')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated cost to remediate this issue', max_digits=14, null=True, verbose_name='Estimated Cost')),
                ('revised_date', models.DateField(blank=True, help_text='Revised target date if extended', null=True, verbose_name='Revised Date')),
                ('extension_reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Reason for extending the target date', null=True, verbose_name='Extension Reason')),
                ('extension_approved_date', models.DateField(blank=True, null=True, verbose_name='Extension Approved Date')),
                ('actual_remediation_date', models.DateField(blank=True, null=True, verbose_name='Actual Remediation Date')),
                ('management_action_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed plan from management to address the issue', null=True, verbose_name='Management Action Plan')),
                ('remediation_approach', models.CharField(choices=[('fix', 'Fix'), ('mitigate', 'Mitigate'), ('accept', 'Accept'), ('transfer', 'Transfer'), ('avoid', 'Avoid')], default='fix', help_text='The approach taken to address this issue', max_length=20, verbose_name='Remediation Approach')),
                ('verification_method', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Method to be used to verify remediation', null=True, verbose_name='Verification Method')),
                ('verification_result', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Results of remediation verification testing', null=True, verbose_name='Verification Result')),
                ('verification_date', models.DateField(blank=True, help_text='Date when remediation was verified', null=True, verbose_name='Verification Date')),
                ('positive_finding_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Positive Finding Notes')),
            ],
            options={
                'verbose_name': 'Issue',
                'verbose_name_plural': 'Issues',
                'ordering': ['-date_identified', 'issue_title'],
            },
        ),
        migrations.CreateModel(
            name='IssueRetest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('scheduled_date', models.DateField(blank=True, help_text='Date when retest is scheduled to occur', null=True, verbose_name='Scheduled Date')),
                ('retest_date', models.DateField(blank=True, help_text='Date when retest was actually performed', null=True, verbose_name='Retest Date')),
                ('result', models.CharField(choices=[('pass', 'Pass'), ('fail', 'Fail'), ('partially_effective', 'Partially Effective'), ('pending_testing', 'Pending Testing'), ('blocked', 'Blocked'), ('not_applicable', 'Not Applicable')], default='pending_testing', help_text='Result of the retest verification', max_length=20, verbose_name='Retest Result')),
                ('test_approach', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of the testing approach used', null=True, verbose_name='Test Approach')),
                ('test_evidence', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Evidence collected during the retest', null=True, verbose_name='Test Evidence')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Additional notes about the retest', null=True, verbose_name='Retest Notes')),
                ('verification_status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rescheduled', 'Rescheduled'), ('cancelled', 'Cancelled')], default='scheduled', help_text='Current status of the verification process', max_length=20, verbose_name='Verification Status')),
                ('review_date', models.DateField(blank=True, help_text='Date when retest results were reviewed', null=True, verbose_name='Review Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Issue Retest',
                'verbose_name_plural': 'Issue Retests',
                'ordering': ['-retest_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IssueWorkingPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('file', models.FileField(upload_to='working_papers/', validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Working Paper File')),
                ('description', models.CharField(blank=True, help_text='Optional description for this working paper.', max_length=255, null=True, verbose_name='Description')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
            ],
            options={
                'verbose_name': 'Issue Working Paper',
                'verbose_name_plural': 'Issue Working Papers',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('object_id', models.PositiveIntegerField()),
                ('note_type', models.CharField(choices=[('todo', 'To-Do'), ('review', 'Review'), ('review_request', 'Review Request'), ('general', 'General')], default='general', max_length=16, verbose_name='Note Type')),
                ('content', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Note Content')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('cleared', 'Cleared by Owner'), ('closed', 'Closed by Supervisor')], default='open', max_length=16, verbose_name='Status')),
                ('cleared_at', models.DateTimeField(blank=True, null=True, verbose_name='Cleared At')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Closed At')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('message', models.TextField()),
                ('notification_type', models.CharField(default='note', max_length=32)),
                ('is_read', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(help_text='Title of the audit objective', max_length=255, verbose_name='Objective Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the audit objective', null=True, verbose_name='Objective Description')),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Priority level of this objective', max_length=20, verbose_name='Priority')),
                ('criteria', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Standards, regulations, or policies that form the basis for evaluation', null=True, verbose_name='Audit Criteria')),
                ('start_date', models.DateField(blank=True, help_text='Date when work on this objective started', null=True, verbose_name='Start Date')),
                ('completion_date', models.DateField(blank=True, help_text='Date when this objective was completed', null=True, verbose_name='Completion Date')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('deferred', 'Deferred')], default='not_started', help_text='Current status of this objective', max_length=20, verbose_name='Status')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to complete this objective', verbose_name='Estimated Hours')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the engagement', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Objective',
                'verbose_name_plural': 'Objectives',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('procedure_type', models.CharField(choices=[('inspection', 'Inspection'), ('observation', 'Observation'), ('inquiry', 'Inquiry'), ('confirmation', 'Confirmation'), ('reperformance', 'Reperformance'), ('analytical', 'Analytical Procedure'), ('substantive', 'Substantive Testing'), ('walkthrough', 'Walkthrough'), ('compliance', 'Compliance Test')], default='inspection', help_text='The type of audit procedure being performed', max_length=20, verbose_name='Procedure Type')),
                ('title', models.CharField(help_text='Test procedure title', max_length=255, verbose_name='Procedure Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed test steps and methodology', null=True, verbose_name='Procedure Description')),
                ('control_being_tested', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of the specific control being evaluated', null=True, verbose_name='Control Being Tested')),
                ('criteria', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Standards, policies or benchmarks used to evaluate the control', null=True, verbose_name='Audit Criteria')),
                ('sample_size', models.PositiveIntegerField(default=0, help_text='Number of items tested', verbose_name='Sample Size')),
                ('sampling_method', models.CharField(blank=True, help_text='Method used to select samples', max_length=100, null=True, verbose_name='Sampling Method')),
                ('planned_date', models.DateField(blank=True, help_text='Date when testing is planned to be performed', null=True, verbose_name='Planned Test Date')),
                ('test_date', models.DateField(blank=True, help_text='Date when testing was actually performed', null=True, verbose_name='Actual Test Date')),
                ('estimated_hours', models.DecimalField(decimal_places=2, default=0, help_text='Estimated time to complete this procedure', max_digits=6, verbose_name='Estimated Hours')),
                ('actual_hours', models.DecimalField(decimal_places=2, default=0, help_text='Actual time spent on this procedure', max_digits=6, verbose_name='Actual Hours')),
                ('test_status', models.CharField(choices=[('not_started', 'Not Started'), ('planning', 'Planning'), ('in_progress', 'In Progress'), ('pending_review', 'Pending Review'), ('completed', 'Completed'), ('deferred', 'Deferred'), ('cancelled', 'Cancelled')], default='not_started', help_text='Current status of testing', max_length=32, verbose_name='Test Status')),
                ('result', models.CharField(blank=True, choices=[('operating_effectively', 'Operating Effectively'), ('not_effective', 'Not Effective'), ('partially_effective', 'Partially Effective'), ('design_effective_operating_ineffective', 'Design Effective, Operating Ineffective'), ('design_ineffective', 'Design Ineffective'), ('inconsistent_application', 'Inconsistent Application'), ('not_applicable', 'Not Applicable'), ('not_tested', 'Not Tested'), ('needs_improvement', 'Needs Improvement')], help_text='Outcome of the test procedure', max_length=40, null=True, verbose_name='Test Result')),
                ('result_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed observations from testing', null=True, verbose_name='Result Notes')),
                ('exceptions_noted', models.PositiveIntegerField(default=0, help_text='Number of exceptions identified during testing', verbose_name='Exceptions Noted')),
                ('exception_details', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Details of any exceptions identified', null=True, verbose_name='Exception Details')),
                ('conclusion', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text="Auditor's conclusion based on test results", null=True, verbose_name='Conclusion')),
                ('impact_assessment', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Assessment of the impact of any identified exceptions', null=True, verbose_name='Impact Assessment')),
                ('is_positive_finding', models.BooleanField(default=False, help_text='Indicates a positive outcome worth highlighting', verbose_name='Positive Finding')),
                ('control_maturity', models.PositiveSmallIntegerField(blank=True, help_text='Rating of control maturity on a scale of 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Control Maturity')),
                ('evidence_list', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='List of evidence gathered during testing', null=True, verbose_name='Evidence List')),
                ('evidence', models.FileField(blank=True, help_text='Primary supporting documentation for test results', null=True, upload_to='audit/procedure_evidence/%Y/%m/', validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Primary Evidence')),
                ('additional_evidence', models.FileField(blank=True, help_text='Additional supporting documentation for test results', null=True, upload_to='audit/procedure_evidence/%Y/%m/', validators=[core.models.validators.validate_file_extension, core.models.validators.validate_file_size], verbose_name='Additional Evidence')),
                ('review_date', models.DateField(blank=True, help_text='Date when the procedure was reviewed', null=True, verbose_name='Review Date')),
                ('review_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Notes from the reviewer', null=True, verbose_name='Review Notes')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the risk', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Procedure',
                'verbose_name_plural': 'Procedures',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProcedureResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('status', models.CharField(choices=[('operating_effectively', 'Operating Effectively'), ('not_effective', 'Not Effective'), ('for_the_record', 'For the Record')], max_length=32, verbose_name='Result Status')),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name='Notes')),
                ('is_for_the_record', models.BooleanField(default=False, verbose_name='Just for the Record')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('is_positive', models.BooleanField(default=False, verbose_name='Positive Result')),
            ],
            options={
                'verbose_name': 'Procedure Result',
                'verbose_name_plural': 'Procedure Results',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was first created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated', verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('title', models.CharField(help_text='Title of the recommendation', max_length=255, verbose_name='Recommendation Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the recommendation', null=True, verbose_name='Recommendation Description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this recommendation', max_length=10, verbose_name='Priority')),
                ('cost_benefit_analysis', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Analysis of costs and benefits of implementing this recommendation', null=True, verbose_name='Cost-Benefit Analysis')),
                ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to implement this recommendation', verbose_name='Estimated Hours')),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=0, help_text='Estimated cost to implement this recommendation', max_digits=12, verbose_name='Estimated Cost')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the issue', verbose_name='Order')),
                ('implementation_status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('implemented', 'Implemented'), ('verified', 'Verified'), ('accepted_risk', 'Risk Accepted'), ('rejected', 'Rejected'), ('deferred', 'Deferred')], db_index=True, default='not_started', help_text='Current status of recommendation implementation', max_length=20, verbose_name='Implementation Status')),
                ('target_date', models.DateField(blank=True, help_text='Target date for implementing this recommendation', null=True, verbose_name='Target Date')),
                ('revised_date', models.DateField(blank=True, help_text='Revised target date if extended', null=True, verbose_name='Revised Date')),
                ('extension_reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Reason for extending the target date', null=True, verbose_name='Extension Reason')),
                ('implementation_date', models.DateField(blank=True, help_text='Date when this recommendation was implemented', null=True, verbose_name='Implementation Date')),
                ('verification_date', models.DateField(blank=True, help_text='Date when implementation was verified', null=True, verbose_name='Verification Date')),
                ('management_action_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed plan for implementing this recommendation', null=True, verbose_name='Management Action Plan')),
                ('effectiveness_evaluation', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Evaluation of how effective the implemented recommendation is', null=True, verbose_name='Effectiveness Evaluation')),
                ('effectiveness_rating', models.CharField(choices=[('not_evaluated', 'Not Evaluated'), ('ineffective', 'Ineffective'), ('partially_effective', 'Partially Effective'), ('effective', 'Effective'), ('highly_effective', 'Highly Effective')], default='not_evaluated', help_text='Rating of the effectiveness of this recommendation', max_length=20, verbose_name='Effectiveness Rating')),
            ],
            options={
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
                'ordering': ['order', 'priority', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, help_text='Timestamp when the record was soft-deleted', null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('title', models.CharField(help_text='Concise title describing the risk', max_length=255, verbose_name='Risk Title')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed description of the risk', null=True, verbose_name='Risk Description')),
                ('category', models.CharField(choices=[('strategic', 'Strategic'), ('operational', 'Operational'), ('financial', 'Financial'), ('compliance', 'Compliance'), ('reputational', 'Reputational'), ('technological', 'Technological'), ('environmental', 'Environmental'), ('fraud', 'Fraud'), ('human_resources', 'Human Resources'), ('legal', 'Legal'), ('governance', 'Governance'), ('other', 'Other')], default='operational', help_text='Primary category of the risk', max_length=20, verbose_name='Risk Category')),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('assessed', 'Assessed'), ('mitigated', 'Mitigated'), ('accepted', 'Accepted'), ('transferred', 'Transferred'), ('closed', 'Closed')], default='identified', help_text='Current status in the risk management lifecycle', max_length=20, verbose_name='Risk Status')),
                ('risk_appetite', models.CharField(choices=[('averse', 'Risk Averse'), ('minimalist', 'Minimalist'), ('cautious', 'Cautious'), ('open', 'Open'), ('seeking', 'Risk Seeking')], default='cautious', help_text="Organization's willingness to accept this type of risk", max_length=15, verbose_name='Risk Appetite')),
                ('risk_tolerance', models.PositiveSmallIntegerField(default=4, help_text='Maximum acceptable risk level (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], verbose_name='Risk Tolerance')),
                ('existing_controls', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Description of controls already in place to mitigate this risk', null=True, verbose_name='Existing Controls')),
                ('control_effectiveness', models.PositiveSmallIntegerField(default=2, help_text='Effectiveness of existing controls (1=Low, 2=Medium, 3=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Control Effectiveness')),
                ('mitigation_plan', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Action plan to address or mitigate this risk', null=True, verbose_name='Mitigation Plan')),
                ('target_date', models.DateField(blank=True, help_text='Target date for implementing risk mitigation measures', null=True, verbose_name='Target Date')),
                ('likelihood', models.PositiveSmallIntegerField(default=2, help_text='Likelihood score (1=Low, 2=Medium, 3=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Likelihood')),
                ('impact', models.PositiveSmallIntegerField(default=2, help_text='Impact score (1=Low, 2=Medium, 3=High)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Impact')),
                ('inherent_risk_score', models.PositiveSmallIntegerField(default=4, help_text='Calculated as Likelihood × Impact (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], verbose_name='Inherent Risk Score')),
                ('residual_risk_score', models.PositiveSmallIntegerField(default=4, help_text='Remaining risk after considering existing controls (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], verbose_name='Residual Risk Score')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the objective', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Risk',
                'verbose_name_plural': 'Risks',
                'ordering': ['order', 'id'],
            },
        ),
    ]
