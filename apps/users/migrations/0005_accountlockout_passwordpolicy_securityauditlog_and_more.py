# Generated by Django 5.1.8 on 2025-08-21 14:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0002_initial'),
        ('users', '0004_passwordhistory'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountLockout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address that triggered the lockout', verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, help_text='Browser/user agent that triggered the lockout', verbose_name='User Agent')),
                ('failed_attempts', models.PositiveIntegerField(default=1, help_text='Number of failed login attempts', verbose_name='Failed Attempts')),
                ('locked_at', models.DateTimeField(auto_now_add=True, help_text='When the account was locked', verbose_name='Locked At')),
                ('expires_at', models.DateTimeField(help_text='When the lockout expires', verbose_name='Expires At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this lockout is currently active', verbose_name='Is Active')),
                ('reason', models.CharField(choices=[('failed_login', 'Failed Login Attempts'), ('suspicious_activity', 'Suspicious Activity'), ('admin_lock', 'Administrative Lock'), ('compromised', 'Account Compromised')], default='failed_login', help_text='Reason for the lockout', max_length=100, verbose_name='Reason')),
            ],
            options={
                'verbose_name': 'Account Lockout',
                'verbose_name_plural': 'Account Lockouts',
                'ordering': ['-locked_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_length', models.PositiveIntegerField(default=12, help_text='Minimum password length', verbose_name='Minimum Length')),
                ('max_length', models.PositiveIntegerField(default=128, help_text='Maximum password length', verbose_name='Maximum Length')),
                ('require_uppercase', models.BooleanField(default=True, help_text='Require at least one uppercase letter', verbose_name='Require Uppercase')),
                ('require_lowercase', models.BooleanField(default=True, help_text='Require at least one lowercase letter', verbose_name='Require Lowercase')),
                ('require_digits', models.BooleanField(default=True, help_text='Require at least one digit', verbose_name='Require Digits')),
                ('require_special', models.BooleanField(default=True, help_text='Require at least one special character', verbose_name='Require Special Characters')),
                ('history_count', models.PositiveIntegerField(default=8, help_text='Number of previous passwords to remember', verbose_name='History Count')),
                ('enable_expiration', models.BooleanField(default=True, help_text='Enable password expiration', verbose_name='Enable Password Expiration')),
                ('expiration_days', models.PositiveIntegerField(default=90, help_text='Number of days before password expires', verbose_name='Expiration Days')),
                ('warning_days', models.PositiveIntegerField(default=14, help_text='Days before expiration to show warning', verbose_name='Warning Days')),
                ('enable_lockout', models.BooleanField(default=True, help_text='Enable account lockout after failed attempts', verbose_name='Enable Account Lockout')),
                ('max_failed_attempts', models.PositiveIntegerField(default=5, help_text='Maximum failed login attempts before lockout', verbose_name='Max Failed Attempts')),
                ('lockout_duration_minutes', models.PositiveIntegerField(default=15, help_text='Duration of account lockout in minutes', verbose_name='Lockout Duration (minutes)')),
                ('enable_breach_detection', models.BooleanField(default=True, help_text='Check passwords against known data breaches', verbose_name='Enable Breach Detection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Password Policy',
                'verbose_name_plural': 'Password Policies',
            },
        ),
        migrations.CreateModel(
            name='SecurityAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('login_success', 'Successful Login'), ('login_failed', 'Failed Login'), ('logout', 'Logout'), ('password_change', 'Password Changed'), ('password_reset', 'Password Reset'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('password_expired', 'Password Expired'), ('password_compromised', 'Password Compromised'), ('suspicious_activity', 'Suspicious Activity'), ('admin_action', 'Administrative Action')], max_length=50, verbose_name='Event Type')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('details', models.JSONField(default=dict, help_text='Additional details about the event', verbose_name='Event Details')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Security Audit Log',
                'verbose_name_plural': 'Security Audit Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='breach_count',
            field=models.PositiveIntegerField(default=0, help_text='Number of data breaches this password was found in', verbose_name='Breach Count'),
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='change_reason',
            field=models.CharField(choices=[('initial', 'Initial Password'), ('reset', 'Password Reset'), ('change', 'User Change'), ('admin', 'Admin Change'), ('expired', 'Password Expired'), ('compromised', 'Password Compromised'), ('policy', 'Policy Update')], default='change', help_text='Reason for password change', max_length=50, verbose_name='Change Reason'),
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='expires_at',
            field=models.DateTimeField(blank=True, help_text='When this password expires (if password expiration is enabled)', null=True, verbose_name='Expires At'),
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='is_compromised',
            field=models.BooleanField(default=False, help_text='Whether this password was found in data breaches', verbose_name='Is Compromised'),
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='last_checked',
            field=models.DateTimeField(blank=True, help_text='When this password was last checked against breach databases', null=True, verbose_name='Last Checked'),
        ),
        migrations.AddIndex(
            model_name='passwordhistory',
            index=models.Index(fields=['user', 'is_compromised'], name='users_passw_user_id_4868ee_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordhistory',
            index=models.Index(fields=['expires_at'], name='users_passw_expires_2ec6df_idx'),
        ),
        migrations.AddField(
            model_name='accountlockout',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lockouts', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='passwordpolicy',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_password_policies', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='passwordpolicy',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='password_policy', to='organizations.organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='passwordpolicy',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_password_policies', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='securityauditlog',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_audit_logs', to='organizations.organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='securityauditlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_audit_logs', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddIndex(
            model_name='accountlockout',
            index=models.Index(fields=['user', 'is_active'], name='users_accou_user_id_494dd1_idx'),
        ),
        migrations.AddIndex(
            model_name='accountlockout',
            index=models.Index(fields=['ip_address', 'is_active'], name='users_accou_ip_addr_51c07a_idx'),
        ),
        migrations.AddIndex(
            model_name='accountlockout',
            index=models.Index(fields=['expires_at'], name='users_accou_expires_230506_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['user', 'event_type'], name='users_secur_user_id_59ea47_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['organization', 'timestamp'], name='users_secur_organiz_323adf_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['ip_address', 'timestamp'], name='users_secur_ip_addr_262305_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['event_type', 'timestamp'], name='users_secur_event_t_3d3c9c_idx'),
        ),
    ]
