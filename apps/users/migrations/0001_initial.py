# Generated by Django 5.1.8 on 2025-04-28 06:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('staff', 'Staff')], default='staff', help_text='Role of the user within their organization.', max_length=50, verbose_name='User Role')),
                ('registration_date', models.DateTimeField(default=users.models.default_datetime, help_text='The date and time when the user registered.', verbose_name='Registration Date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', to='auth.group', verbose_name='Groups')),
                ('organization', models.ForeignKey(blank=True, help_text='Organization this user belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='organizations.organization', verbose_name='Organization')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions granted to the user.', related_name='customuser_set', to='auth.permission', verbose_name='User Permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('staff', 'Staff')], default='staff', max_length=50)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='organizations.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organization Role',
                'verbose_name_plural': 'Organization Roles',
            },
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(default=users.models.generate_otp_code, help_text='6-digit one-time verification code.', max_length=6, verbose_name='One-Time Password')),
                ('is_verified', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('staff', 'Staff')], default='staff', max_length=50)),
                ('attempts', models.PositiveSmallIntegerField(default=0)),
                ('expires_at', models.DateTimeField(default=users.models.default_expiration)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otps', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTP',
                'verbose_name_plural': 'OTPs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(default='default-avatar.png', help_text="User's avatar image.", upload_to='avatars/', verbose_name='Profile Picture')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='users_custo_email_c80f75_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['organization'], name='users_custo_organiz_a36e65_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role'], name='users_custo_role_6a37b1_idx'),
        ),
        migrations.AddIndex(
            model_name='organizationrole',
            index=models.Index(fields=['organization', 'role'], name='users_organ_organiz_55b04f_idx'),
        ),
        migrations.AddIndex(
            model_name='organizationrole',
            index=models.Index(fields=['user', 'role'], name='users_organ_user_id_93afa8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='organizationrole',
            unique_together={('organization', 'user')},
        ),
        migrations.AddIndex(
            model_name='otp',
            index=models.Index(fields=['user', 'is_verified'], name='users_otp_user_id_beabed_idx'),
        ),
        migrations.AddIndex(
            model_name='otp',
            index=models.Index(fields=['otp'], name='users_otp_otp_5a9a47_idx'),
        ),
        migrations.AddIndex(
            model_name='otp',
            index=models.Index(fields=['expires_at'], name='users_otp_expires_8f43b7_idx'),
        ),
    ]
